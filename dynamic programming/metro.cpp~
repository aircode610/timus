#include <bits/stdc++.h> 

using namespace std;

bool exists(vector<pair<int, int> > v, pair<int, int> val){
  for (int i = 0; i < v.size(); i++){
    if (v[i].first == val.first && v[i].second == val.second){
      return true;
    }
  }
  return false;
}

int main() {

  int N,M;
  cin >> N >> M;
  double dp[M+2][N+2];
  //dp[1][M + 1] = 0;
  for (int i = 0; i < M + 3; i++){
    for (int j = 0; j < N + 3; j++){
      dp[i][j] = 0.0;
    }
  }

  vector<pair<int, int> > quarters;
  int K;
  cin >> K;

  for (int i = 0; i < K; i++){
    int x, y;
    cin >> y >> x;
    quarters.push_back(make_pair(x, y));
  }

  int i = 2;
  int j = N + 1;
  vector<double> pos;
  
  while (i <= M + 1 && j >= 1){
    if (dp[i - 1][j] == 0){
      dp[i][j] = dp[i][j + 1] + 100.0;
    }
    else if (dp[i][j + 1] == 0){
      dp[i][j] = dp[i - 1][j] + 100.0;
    }
    else {
      pos.clear();
      pos.push_back(dp[i][j + 1] + 100.0);
      pos.push_back(dp[i - 1][j] + 100.0);
      if (exists(quarters, make_pair(M - i + 2, j))){
	pos.push_back(dp[i - 1][j + 1] + 141.421356237);
      }
      dp[i][j] = *min_element(pos.begin(), pos.end()); 
    }

    if (i == M + 1){
      i = 1;
      j--;
    }
    else {
      i++;
    }
    
  }
  
  cout << round(dp[M + 1][1]);
  
  return 0;
  
}
